trigger:
- develop

pool:
  name: AS-SELF

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: AppSealing Wildcard Distribution Profile

steps:
- script: |
    # # Define paths
    # P12_CERT_PATH="$(Build.SourcesDirectory)/distribution.p12"
    # PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/profile.mobileprovision"
    # KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    # KEYCHAIN_PASSWORD="temp123"

    # echo "Creating temporary keychain..."
    # security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    # echo "Setting temporary keychain as default..."
    # security list-keychains -s "$KEYCHAIN_PATH"
    # security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    # echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
    # security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign

    # echo "Allowing codesign access..."
    # security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    # echo "Listing installed identities..."
    # security find-identity -v

    # echo "Installing provisioning profile..."
    # xcrun -sdk iphoneos provisioningprofiles import "$PROVISIONING_PROFILE_PATH"

    # echo "Provisioning profile successfully installed."
  displayName: 'Setup Temporary Keychain and Install Certificate'

- script: |
    SCHEME_NAME=$(xcodebuild -list -json | python -c 'import sys, json; print(json.load(sys.stdin)["project"]["schemes"][0])')
    APP_NAME=$(xcodebuild -list -json | python -c 'import sys, json; print(json.load(sys.stdin)["project"]["targets"][0])')
    echo "##vso[task.setvariable variable=SCHEME_NAME]$SCHEME_NAME"
    echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
    echo "##vso[task.logissue type=warning] Extracted SCHEME_NAME: $SCHEME_NAME"
    echo "##vso[task.logissue type=warning] Extracted APP_NAME: $APP_NAME"
  displayName: 'Extract Scheme and App Name'

- script: |
    # Automatically increment build number
    cd "/Users/puzznic/Project/Azure_Agent/_work/2/s/$(APP_NAME).xcodeproj"
    agvtool next-version -all
    NEW_BUILD_NUMBER=$(agvtool what-version -terse)
    echo "##vso[task.setvariable variable=BUILD_NUMBER]$NEW_BUILD_NUMBER"
    echo "##vso[task.logissue type=warning] New Build Number: $NEW_BUILD_NUMBER"
  displayName: 'Increment Build Number'

- script: |
    # Try to extract CFBundleIdentifier from Info.plist
    INFO_PLIST_PATH="$(Build.SourcesDirectory)/$(APP_NAME)/Info.plist"
    BUNDLE_ID=$(defaults read "$INFO_PLIST_PATH" CFBundleIdentifier 2>/dev/null)

    # If not found in Info.plist, use xcodebuild to extract it
    if [[ -z "$BUNDLE_ID" ]]; then
        echo "CFBundleIdentifier not found in Info.plist. Trying to extract it using xcodebuild..."
        BUNDLE_ID=$(xcodebuild -showBuildSettings -scheme "$(SCHEME_NAME)" -workspace "$(Build.SourcesDirectory)/$(APP_NAME).xcodeproj" | grep "PRODUCT_BUNDLE_IDENTIFIER" | sed 's/PRODUCT_BUNDLE_IDENTIFIER = //')

        if [[ -z "$BUNDLE_ID" ]]; then
            echo "Error: CFBundleIdentifier not found."
            exit 1
        fi
    fi

    echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
    echo "##vso[task.logissue type=warning] Extracted Bundle ID: $BUNDLE_ID"

    # Create ExportOptions.plist after extracting the Bundle ID
    EXPORT_DIR="$HOME/exports"
    mkdir -p "$EXPORT_DIR"
    cat << EOF > "$EXPORT_DIR/ExportOptions.plist"
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>method</key>
        <string>app-store</string>
        <key>teamID</key>
        <string>${{ parameters.TEAM_ID }}</string>
        <key>provisioningProfiles</key>
        <dict>
            <!-- Using the extracted Bundle ID here -->
            <key>$BUNDLE_ID</key>
            <string>${{ parameters.PROVISIONING_PROFILE_NAME }}</string>
        </dict>
    </dict>
    </plist>
    EOF

    echo "ExportOptions.plist created with provisioningProfiles and bundle ID."
    cat "$EXPORT_DIR/ExportOptions.plist"  # Output the created plist content for debugging
  displayName: 'Create ExportOptions.plist with Bundle ID'

- script: |
    # Define paths
    EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
    IPA_PATH="$EXPORT_DIR/$(APP_NAME).ipa"
    ARCHIVE_PATH="$EXPORT_DIR/$(APP_NAME).xcarchive"
    WORKSPACE_PATH="$(Build.SourcesDirectory)/$(APP_NAME).xcodeproj/project.xcworkspace"

    echo "Updating Deployment Target to 12.0..."
    /usr/libexec/PlistBuddy -c "Set :IPHONEOS_DEPLOYMENT_TARGET 12.0" "$(Build.SourcesDirectory)/$(APP_NAME)/Info.plist"

    echo "Starting Xcode Archive..."
    xcodebuild -workspace "$WORKSPACE_PATH" \
               -scheme '$(SCHEME_NAME)' \
               -sdk iphoneos \
               -configuration 'Release' \
               clean archive \
               CODE_SIGN_IDENTITY="iPhone Distribution" \
               CODE_SIGN_STYLE="Manual" \
               DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
               PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
               -archivePath "$ARCHIVE_PATH"

    echo "Exporting IPA..."
    xcodebuild -exportArchive \
      -archivePath "$ARCHIVE_PATH" \
      -exportOptionsPlist "$HOME/exports/ExportOptions.plist" \
      -exportPath "$EXPORT_DIR"

    echo "IPA successfully exported: $IPA_PATH"
  displayName: 'Build and Export IPA'

- script: |
    # Grant execution permission to generate_hash script
    HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/AppSealingSDK/Tools/generate_hash"
    IPA_PATH="$(Build.ArtifactStagingDirectory)/$(APP_NAME).ipa"

    echo "Granting execution permission to generate_hash..."
    chmod +x "$HASH_SCRIPT_PATH"

    echo "Running generate_hash with IPA..."
    "$HASH_SCRIPT_PATH" "$IPA_PATH"

    echo "Hash generation completed."
  displayName: 'Run generate_hash on IPA'

- script: |
    set -x
    xcrun altool --upload-app -f "$(Build.ArtifactStagingDirectory)/$(APP_NAME).ipa" -t ios -u "${{ parameters.APPLE_ID }}" -p "${{ parameters.APP_SPECIFIC_PASSWORD }}"
  displayName: 'Upload to TestFlight'

- script: |
    # echo "Deleting temporary keychain..."
    # TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    # if [ -f "$TEMP_KEYCHAIN_PATH" ]; then
    #     # Delete only the temporary keychain, not the default login keychain
    #     security delete-keychain "$TEMP_KEYCHAIN_PATH"
    #     echo "Temporary keychain deleted successfully."
    # else
    #     echo "Temporary keychain not found. Skipping deletion."
    # fi
  displayName: 'Cleanup Temporary Keychain'